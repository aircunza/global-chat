openapi: 3.0.0
info:
  title: GLobal Chat API Documentation
  description: |
    Chat application using technologies like WebSocket.

    ⚠️ **Note:** All routes in this API are protected using an `accessToken` sent as an `HttpOnly` cookie, which must be present in every authenticated request.
    The only exceptions to this rule are the `/login` and `/sign-up` routes, which are publicly accessible to allow user registration and login.
  version: 1.0.0

tags:
  - name: auth
    description: Access to the platform
  - name: users
    description: Everything about users service

paths:
  /sign-up:
    post:
      tags:
        - auth
      summary: Register a new user account
      description: |
        Registers a new user using their name, email, and password.
        Upon successful registration, returns the newly created user's details.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: Successful response with the user
          content:
            application/json:
              schema:
                type: object
                description: Data Transfer Object representing a user
                properties:
                  id:
                    type: string
                    description: Unique identifier of the user
                    example: "1a2b3c4d"
                  name:
                    type: string
                    description: Full name of the user
                    example: "Alice Smith"
                  email:
                    type: string
                    format: email
                    description: Email address of the user
                    example: "alice@example.com"
        "409":
          description: Email already in use / User already exists

  /login:
    post:
      tags:
        - auth
      summary: Authenticate user and initiate session
      description: |
        Authenticates a user using their email and password credentials.
        If the login is successful, returns user details along with an access token and its expiration time.
        This token should be used for authenticating subsequent requests to protected endpoints.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: Registered user's email address
                password:
                  type: string
                  minLength: 4
                  description: User's password (minimum 4 characters)
              required:
                - email
                - password
      responses:
        "200":
          description: Successful login response
          headers:
            Set-Cookie:
              schema:
                type: string
                example: accessToken=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...; HttpOnly
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        example: "123"
                      name:
                        type: string
                        example: "Jane Doe"
                      email:
                        type: string
                        format: email
                        example: "jane@example.com"
                    required:
                      - id
                      - name
                      - email
                  session:
                    type: object
                    properties:
                      accessToken:
                        type: string
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                      expiresAt:
                        type: string
                        format: date-time
                        example: "2025-04-15T12:00:00Z"
                    required:
                      - accessToken
                      - expiresAt
                required:
                  - user
                  - session
        "404":
          description: User not found
        "401":
          description: Password incorrect

  /verify:
    get:
      tags:
        - auth
      summary: Verify the user's session and authentication status
      description: |
        This endpoint verifies if the user is still authenticated by checking their `accessToken`
        in the cookies. The response will confirm whether the user is still logged in based on the 
        validity of the session. A valid session returns the user's information and the expiration 
        of their session.
      responses:
        "200":
          description: Successful response with the user's session status
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        example: "123"
                      name:
                        type: string
                        example: "Jane Doe"
                      email:
                        type: string
                        format: email
                        example: "jane@example.com"
                    required:
                      - id
                      - name
                      - email
                  session:
                    type: object
                    properties:
                      accessToken:
                        type: string
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                      expiresAt:
                        type: string
                        format: date-time
                        example: "2025-04-15T12:00:00Z"
                    required:
                      - accessToken
                      - expiresAt
                required:
                  - user
                  - session
        "401":
          description: Missing or invalid token in cookies
        "498":
          description: Token corrupted or invalid
        "404":
          description: User not found

  /logout:
    post:
      summary: Log the user out
      description: Clears the session cookie (`accessToken`)
      tags:
        - auth
      responses:
        "200":
          description: Successfully logged out
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Logged out successfully

  /users:
    get:
      tags:
        - users
      summary: Get all users
      description: Returns a list of all users in the system
      responses:
        "200":
          description: Successful response with a list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  description: Data Transfer Object representing a user
                  properties:
                    id:
                      type: string
                      description: Unique identifier of the user
                      example: "1a2b3c4d"
                    name:
                      type: string
                      description: Full name of the user
                      example: "Alice Smith"
                    email:
                      type: string
                      format: email
                      description: Email address of the user
                      example: "alice@example.com"

    post:
      tags:
        - users
      summary: Create a new user
      description: Creates a new user in the system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: Successful response with the created user
          content:
            application/json:
              schema:
                type: object
                description: Data Transfer Object representing a user
                properties:
                  id:
                    type: string
                    description: Unique identifier of the user
                    example: "1a2b3c4d"
                  name:
                    type: string
                    description: Full name of the user
                    example: "Alice Smith"
                  email:
                    type: string
                    format: email
                    description: Email address of the user
                    example: "alice@example.com"
        "409":
          description: Email already in use / User already exists

  /users/{id}:
    get:
      tags:
        - users
      summary: Get a user by ID
      description: Returns a user with the specified ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successful response with the user
          content:
            application/json:
              schema:
                type: object
                description: Data Transfer Object representing a user
                properties:
                  id:
                    type: string
                    description: Unique identifier of the user
                    example: "1a2b3c4d"
                  name:
                    type: string
                    description: Full name of the user
                    example: "Alice Smith"
                  email:
                    type: string
                    format: email
                    description: Email address of the user
                    example: "alice@example.com"
        "404":
          description: User not found

components:
  schemas:
    User:
      type: object
      required:
        - id
        - name
        - email
        - password
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier (UUID) of the user
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          minLength: 1
          description: Full name of the user
          example: "Jane Doe"
        email:
          type: string
          format: email
          description: Email address of the user
          example: "jane.doe@example.com"
        password:
          type: string
          minLength: 4
          description: Password (at least 4 characters)
          example: "secure123"
